/*
USER			 	
U_ID(PK)	VARCHAR2(100)		
U_PW		VARCHAR2(100)		
U_NAME		VARCHAR2(200)		
U_ADRESS	VARCHAR2(300)	
U_EAMIL		VARCHAR2(300)	
U_BIRTH		DATE
-------------------------------------------------
ORDER	 		 	
O_NUM	 	NUMBER	
O_DATE	 	DATE		
U_ID(FK)	VARCHAR2(100)
P_NUM (FK)	NUMBER 
외래키는 참조 할 테이블을 먼저 만들고 그 다음에 만들기
-------------------------------------------------
PRODUCT	 	
P_NUM(PK)	NUMBER
P_NAME		VARCHAR2(100)	
P_PRICE 	NUMBER
P_COUNT		NUMBER
*/
CREATE TABLE "USER"(
U_ID VARCHAR2(100) PRIMARY KEY,
U_PW VARCHAR2(100),
U_NAME VARCHAR(200),
U_ADRESS VARCHAR(300),
U_EAMIL VARCHAR(300),
U_BIRTH DATE
);

CREATE TABLE "PRODUCT"(
P_NUM NUMBER PRIMARY KEY,
P_NAME VARCHAR2(100),
P_PRICE NUMBER,
P_COUNT NUMBER
);

CREATE TABLE "ORDER"(
O_NUM NUMBER PRIMARY KEY,
O_DATE DATE,
U_ID VARCHAR2(100),
P_NUM NUMBER,
CONSTRAINT USER_FK FOREIGN KEY(U_ID) REFERENCES "USER"(U_ID),
CONSTRAINT PRODUCT_FK FOREIGN KEY(P_NUM) REFERENCES PRODUCT(P_NUM)
);
---------------------------------------------------------------------------
--문제
--요구사항
--꽃 테이블과 화분 테이블이 필요하다
--꽃을 구매할때 화분도 같이 구매한다.
CREATE TABLE "FLOWER"(
F_NAME VARCHAR2(200) PRIMARY KEY,
F_COLOR VARCHAR2(100),
F_PRICE NUMBER
);

CREATE TABLE "POT"(
P_NUM NUMBER PRIMARY KEY,
P_COLOR VARCHAR2(100),
P_SHAPE VARCHAR2(200),
F_NAME VARCHAR2(200),
CONSTRAINT FLOWER_FK FOREIGN KEY(F_NAME) REFERENCES FLOWER(F_NAME)
);
-----------------------------------------------------------------------------
--개체(Entity)
--CD : 타이틀, 가격, 장르, 트랙 리스트
--아티스트 : 이름, 국적, 데뷔년도
--트랙 : 타이틀, 러닝타임
--관계(Relationship)
--CD와 아티스트는 N:1(한명의 아티스트는 여러 CD를 낼 수 있다.)
--CD와 트랙은 1:N(하나의 CD에는 여러 트랙이 포함될 수 있다.)

CREATE TABLE "ARTIST"(
A_NAME VARCHAR2(255)PRIMARY KEY,
A_COUNTYR VARCHAR2(255),
A_BIRTH DATE
);

CREATE TABLE "CD"(
C_TITLE VARCHAR2(255)PRIMARY KEY,
C_PRICE NUMBER,
C_TYPE VARCHAR2(100),
C_LIST VARCHAR2(255),
A_NAME VARCHAR2(255),
CONSTRAINT CD_FK FOREIGN KEY(A_NAME) REFERENCES ARTIST(A_NAME)
);

CREATE TABLE "TRACK"(
T_TILTE VARCHAR2(255)PRIMARY KEY,
T_TIME NUMBER,
C_TITLE VARCHAR2(255),
CONSTRAINT TRACK_FK FOREIGN KEY(C_TITLE)REFERENCES CD(C_TITLE)
);
-------------------------------------------------------------------------
--회사의 정보를 DB에 저장하려고 한다.
--회사는 4개의 부서를 운영한다. 부서는 (부서번호,부서 이름)을 저장한다.
--부서는 1명 이상의 직원(직원번호,직원이름,직책)을 두고있다. 각 직원은 하나의 부서에 소속
--직원은 부양가족(이름,나이)이 있을수 있다.(누구의 가족인지 확인)
--각 직원은 근무했던 부서에 대한 근무기록(기간,직책)이 있다.(누가 일 했는지 확인)
CREATE TABLE "DIVISION"(
D_ID VARCHAR2(200)PRIMARY KEY,
D_NAME VARCHAR2(200)
);

CREATE TABLE "EMPLOYEE"(
E_ID VARCHAR2(200)PRIMARY KEY,
E_NAEM VARCHAR2(200),
E_POSTION VARCHAR2(200),
D_ID VARCHAR2(200),
CONSTRAINT EMPLOYEE_PK FOREIGN KEY(D_ID)REFERENCES DIVISION(D_ID)
);

CREATE TABLE "FAMILY"(
F_NAME VARCHAR2(200),
F_AGE NUMBER(2),
E_ID VARCHAR2(200)PRIMARY KEY,
CONSTRAINT FAMILY_FK FOREIGN KEY(E_ID)REFERENCES EMPLOYEE(E_ID)
);

CREATE TABLE "WORKRECODE"(
PERIOD DATE,
E_ID VARCHAR2(200),
CONSTRAINT WORKRECODE FOREIGN KEY(E_ID)REFERENCES FAMILY(E_ID)
);

--DROP TABLE FAMILY;
-------------------------------------------------------------------------
SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES;
--SELECT * FROM EMPLOYEES;

--컬럼 조회
SELECT * FROM COLS WHERE TABLE_NAME = 'EMPLOYEES';
--사원테이블에서 모든 정보를 조회하세요
SELECT * FROM EMPLOYEES;
--DEPARTMENTS (부서)테이블의 모든 정보를 조회하세요
SELECT * FROM DEPARTMENTS;
--T사원테이블에서 FIRST_NAME이름,JOB_ID직종,SALARY급여를 조회해보세요
SELECT FIRST_NAME,JOB_ID,SALARY 
FROM EMPLOYEES;
--컬럼에 실제로 없는 정보도 출력할 수 있다.
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY,COMMISSION_PCT,SALARY*COMMISSION_PCT
FROM EMPLOYEES;

--사원테이블에서 급여가 10000이상인 사뤈들의 정보를 사번, 이름 , 급여순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME ,SALARY
FROM EMPLOYEES 
WHERE SALARY >= 10000;--WHERE은 반드시 FROM 뒤에 와야한다.

--사원테이블에서 이름이 MICHAEL인 사원의 사번, 이름 조회
--문자열 데이터는 ''에 넣어서 표현
SELECT EMPLOYEE_ID,FIRST_NAME 
FROM EMPLOYEES
WHERE FIRST_NAME ='Michael';

--사원테이블에서 직종이 IT_PROG인 사원들의 정보를 사번,이름,직종,급여 순으로 조회
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG';

--사원테이블에서 급여가 10000이상 13000이하인 사원의 정보를 이름,급여 순으로 조회
SELECT FIRST_NAME,SALARY
FROM EMPLOYEES
WHERE SALARY >= 10000 AND SALARY <=13000;

--사원테이블에서 입사일이 05년9월21일 이후에 입사한 사원의 정보를 사번, 이름,입사일 순으로 입력
SELECT EMPLOYEE_ID,FIRST_NAME,HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >= '2005-09-21';

--사원테이블에서 2006년도에 입사한 사원들의 정보를 사번,이름,직종,입사일순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >='2006-01-01' AND HIRE_DATE <= '2006-12-31';

--사원테이블에서 직종이 'SA_MAN'이거나 'IT_PROG'인 사원들의 모든 정보를 출력
SELECT * FROM EMPLOYEES 
WHERE JOB_ID ='SA_MAN' OR JOB_ID ='IT_PROG';

--사원테이블에서 급여가 2200, 3200,5000,6000 을 받는 사원들의 정보를
--사번 ,이름 , 직종 ,급여 순으로 조회
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE SALARY =2200 OR SALARY =3200 OR SALARY =5000 OR SALARY =6000;

SELECT EMPLOYEE_ID,JOB_ID,HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '2006-01-01'AND'2006-12-31';

-- IN(값,값,값)
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE SALARY IN(2200,3200,5000,6000);

--직종이 'SA_MAN' , 'IT_PROG'가 아닌 모든 사원의 정보를 출력
SELECT * FROM EMPLOYEES WHERE JOB_ID NOT IN('SA_MAN','IT_PROG');

--사원테이블에서 사원들의 이름 중 M으로 시작하는 사원들의 정보를 사번, 이름 , 직종 순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'M%';

--사원테이블에서 이름이 d로 끝나는 사원의 사번,이름 ,직종 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID FROM EMPLOYEES 
WHERE FIRST_NAME LIKE'%d';

--사원테이블에서 이름에 a가 포함되어있는 사원의 정보를 이름,직종 순으로 출력
SELECT FIRST_NAME,JOB_ID FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%a%';

--이름의 첫 글자가 M이면서 총 7글자의 이름을 가진 사원정보를 사번, 이름순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE'M______';

--사원테이블에서 이름에 3번째 글자에 a가들어가는 사원들의 정보를 사번,이름 순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE'__a%';

--이름에 소문자o가 들어가면서 a로 끝나는 사원들의 정보를 이름,급여 순으로 출력
SELECT FIRST_NAME,SALARY FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%o%a';

--이름이 H로 시작하면서 6글자 이상인 사원들의 정보를 사번, 이름 순으로 조회
SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE'H_____%';

--사원테이블에서 이름에s가 들어있지 않은 사원들만 사번 ,이름으로 검색
SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME NOT LIKE '%s%';

--이어진 문자도 지정 가능
SELECT EMPLOYEE_ID,FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%el%' OR FIRST_NAME LIKE '%en%';

--언더바 자체를 조회하고싶으면 이스케이프문자 '%\_%';를 써야한다.







